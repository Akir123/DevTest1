package com.user.config;

import java.time.Duration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.jedis.JedisClientConfiguration;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import com.user.binding.Country;

@Configuration
public class RedisConfig {

    @Bean
    public JedisConnectionFactory jedisConnectionFactory() {
        RedisStandaloneConfiguration redisStandaloneConfig = new RedisStandaloneConfiguration("localhost", 6379);
        
        JedisClientConfiguration.JedisClientConfigurationBuilder jedisClientConfigBuilder = 
            JedisClientConfiguration.builder();
        jedisClientConfigBuilder.connectTimeout(Duration.ofSeconds(10)); // Increase timeout as needed
        
        JedisClientConfiguration jedisClientConfig = jedisClientConfigBuilder.build();
        return new JedisConnectionFactory(redisStandaloneConfig, jedisClientConfig);
    }

    @Bean
    public RedisTemplate<String, Country> redisTemplate() {
        RedisTemplate<String, Country> redisTemplate = new RedisTemplate<>();
        redisTemplate.setConnectionFactory(jedisConnectionFactory());
        redisTemplate.setKeySerializer(new StringRedisSerializer()); // For String keys
        redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer()); // For object values
        redisTemplate.setHashKeySerializer(new StringRedisSerializer()); // For String hash keys
        redisTemplate.setHashValueSerializer(new GenericJackson2JsonRedisSerializer()); // For object hash values
        return redisTemplate;
    }
}
